name: CI
on:
  push:
  workflow_dispatch:
    inputs:
      trigger:
        description: Type m to triggre manual jobs
        required: false
        default: ''
jobs:
  updates:
    name: updates java-${{ matrix.java }}
    if: startsWith(github.event.inputs.trigger, 'm')
      || startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11. 17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with: # 'temurin' 'zulu' 'adopt' 'adopt-hotspot' 'adopt-openj9' 'liberica' 'microsoft'
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
      - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-parent-updates
      - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-plugin-updates
      - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-property-updates
  unit-tests:
    name: unit tests java-${{ matrix.java }}
    if: github.event.inputs.trigger == ''
      || !startsWith(github.event.inputs.trigger, 'm')
      || !startsWith(github.event.inputs.trigger, 'M')
    strategy:
      matrix:
        java: [11, 17, 18]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            ~/.npm
            ~/.docker
            ~/.gradle
          key: ${{ runner.os }}-build-${{ hashFiles('**/pom.xml') }}
      - run: docker compose version
      - run: docker version
      - run: docker pull mysql:8.0.24
      - run: if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
      - run: |
          if [[ "" != `docker ps -aq` ]] ; then docker rm -f -v `docker ps -aq` ; fi
          docker run -d --rm --name mysql --platform=linux/x86_64 \
            --health-cmd='mysqladmin ping -h 127.0.0.1 -u $MYSQL_USER --password=$MYSQL_PASSWORD || exit 1' \
            --health-start-period=1s --health-retries=1111 --health-interval=1s --health-timeout=5s \
            -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=database \
            -e MYSQL_USER=user -e MYSQL_PASSWORD=password \
            -p 3306:3306 \
            mysql:8.0.24  
          while [[ $(docker ps -n 1 -q -f health=healthy -f status=running | wc -l) -lt 1 ]] ; do sleep 3 ; echo -n '.' ; done ; sleep 15; echo 'MySQL is ready.'
      - run: cd $GITHUB_WORKSPACE ; ./mvnw
      - run: docker stop mysql
